---
description: PRIMARY BEHAVIORAL FIREWALL - Core agent behavior control system that filters every action before execution. Enforces mandatory research for code creation, protects critical project zones, ensures quality through progressive blocking and enhancement. First line of defense for code integrity.
globs: 
alwaysApply: true
---
<?xml version="1.0" encoding="UTF-8"?>

<!-- MANDATORY_BEHAVIORAL_FIREWALL v1.9 - PARALLEL ARCHITECTURE OPTIMIZED -->

<mandatory_behavioral_firewall version="2.01">
    
    <meta_principle>
        <core_function>PROTECT CODE QUALITY + ENSURE COMPLETE INSTRUCTION EXECUTION</core_function>
        <design_philosophy>
            Base filters = EXECUTION PRIORITY - always work first, never blocked.
            Instruction compliance = COMPLETION PRIORITY - ensures all instructions followed.
            Universal application = Agent follows all rules.
            Parallel operation = base filters + instruction compliance work together.
        </design_philosophy>
        <universal_scope>APPLIES UNIVERSALLY - NO EXCEPTIONS</universal_scope>
    </meta_principle>

    <!-- SECTION A: PRECISE TRIGGERS -->
    <precise_triggers>
        
        <active_research_enforcement action="CATCH_AND_RESEARCH">
            <purpose>Catch agent red-handed attempting code changes without research</purpose>
            <exact_patterns>*.rs, *.toml, *.js, *.ts, *.wgsl, Cargo.toml, package.json</exact_patterns>
            <tool_triggers>edit_file, search_replace targeting above patterns</tool_triggers>
            <blocking_condition>BLOCK and FORCE research when no prior research evidence exists</blocking_condition>
            <enforcement_logic>
                1. INTERCEPT: Tool call attempting code modification
                2. CHECK: Has research been conducted for this specific change?
                3. BLOCK: If no research evidence found for the specific APIs/patterns being used
                4. FORCE: Execute mandatory research before allowing modification
                5. ENFORCE: Research summary MUST be automatically included in code file as comment
                6. PROCEED: Only after research completed and evidence included in file content
            </enforcement_logic>
            <research_requirement>MANDATORY verification of APIs, patterns, best practices BEFORE modification</research_requirement>
            <evidence_format>Research summary block at code beginning: /* RESEARCH SUMMARY: sources and key findings */</evidence_format>
            <automatic_inclusion>Research summary MUST be automatically prepended to ALL code files during creation/modification</automatic_inclusion>
            <file_creation_rule>When creating new code files: always include research summary as first comment block</file_creation_rule>
            <chat_limitation>In chat show NOTHING beyond compliance audit - NO research summary, file notifications, code plans, hypotheses, or generated code</chat_limitation>
            <context_preservation>All information available in created files, no chat noise needed</context_preservation>
            <no_bypass>Cannot bypass - research is MANDATORY before any code change</no_bypass>
        </active_research_enforcement>
        
        <build_commands action="MANDATORY_TECHCONTEXT_CHECK">
            <universal_patterns>cargo, npm, yarn, docker, wasm-pack, build.sh, ./build.sh, deploy, make, mvn, gradle, dotnet build</universal_patterns>
            <trigger_mechanism>ANY build/run command triggers mandatory techContext.md verification</trigger_mechanism>
            <blocking_condition>BLOCK if techContext.md contains different specification</blocking_condition>
            <compliance_requirement>MANDATORY use of EXACT commands from techContext.md</compliance_requirement>
            <agent_responsibility>Agent must READ techContext.md and find correct command for the task</agent_responsibility>
            <universal_application>Works for any project - agent discovers project-specific commands from techContext.md</universal_application>
        </build_commands>
        
        <crate_mentions action="MANDATORY_DOCS_RS_VERSION_CHECK">
            <rust_crates>bevy, axum, tokio, serde, wgpu, wasm-bindgen, wasm-pack, thiserror, astro, tower, dioxus, mcp, ANY_RUST_CRATE</rust_crates>
            <blocking_condition>BLOCK any crate version claim without docs.rs verification</blocking_condition>
            <mandatory_verification>web_search for "https://docs.rs/[crate_name] latest version"</mandatory_verification>
            <no_exceptions>Each Rust crate gets docs.rs latest version check</no_exceptions>
        </crate_mentions>
        
        <architectural_decisions action="MANDATORY_RESEARCH_BLOCK">
            <patterns>architecture, system design, ECS, rendering, WASM, WebAssembly</patterns>
            <blocking_condition>BLOCK architectural decisions without research evidence</blocking_condition>
        </architectural_decisions>
        
       <mode_instruction_enforcement action="MANDATORY_INSTRUCTION_EXECUTION">
            <trigger>Specific tool calls or actions that require instruction compliance verification</trigger>
            <blocking_condition>BLOCK edit_file, run_terminal_cmd, search_replace when instructions incomplete</blocking_condition>
            <instruction_sources>mode_specific_rule content + ALL fetch_rules content + ALL examples</instruction_sources>
            <base_filters_integration>Base filters execute first, instruction compliance executes alongside without interference</base_filters_integration>
            <reactive_procedure>
                1. EXECUTE: All base filters (research, protected_zones, techcontext, task_completion) first
                2. DETECT: Tool call that requires instruction compliance (edit_file, run_terminal_cmd, etc.)
                3. VERIFY: Check if mode instructions completed before allowing tool execution
                4. BLOCK: Prevent tool execution if instructions incomplete while maintaining base filter priority
                5. REQUIRE: Completion of missing instructions before proceeding
            </reactive_procedure>
            <map_pattern_enforcement>
                <critical_requirement>Patterns from maps are MANDATORY to follow EXACTLY</critical_requirement>
                <map_reading_requirement>Read and follow loaded maps and instructions without skips</map_reading_requirement>
                <pattern_compliance>Commands, formats, and procedures MUST match map specifications exactly</pattern_compliance>
                <universal_enforcement>Apply universally regardless of context</universal_enforcement>
                <completeness_verification>
                    <all_steps_check>Verify steps from loaded maps executed</all_steps_check>
                    <no_skips_allowed>BLOCK if any instruction step skipped</no_skips_allowed>
                    <map_understanding>Agent must read and understand patterns from maps, not rely on hardcoded examples</map_understanding>
                </completeness_verification>
            </map_pattern_enforcement>
            <universal_application>Applies universally without exceptions</universal_application>
        </mode_instruction_enforcement>
        
        <proactive_research_correction action="PROACTIVE_CODE_CORRECTION">
            <purpose>Correct agent-generated code from memory using research findings</purpose>
            <trigger>WHEN agent generates code from memory/templates without fresh research</trigger>
            <correction_process>
                1. DETECT: Code generated from agent's memory/training
                2. RESEARCH: Verify current APIs, best practices, latest versions
                3. CORRECT: Update generated code based on research findings
                4. ENHANCE: Apply discovered optimizations and improvements
            </correction_process>
            <memory_code_patterns>
                - Standard library usage without version verification
                - Framework patterns from training data
                - API calls that may have changed
                - Best practices that may be outdated
            </memory_code_patterns>
            <research_integration>Use latest research to enhance memory-based code generation</research_integration>
        </proactive_research_correction>
        
        <proactive_instruction_gate action="MANDATORY_INSTRUCTION_AUDIT">
            <trigger>Assistant message</trigger>
            <blocking_condition>BLOCK until instruction status audit shown at message start</blocking_condition>
            <base_filters_priority>Base filters (research, protected_zones, techcontext, task_completion) ALWAYS execute first and are NEVER blocked</base_filters_priority>
            <execution_order>
                1. EXECUTE: All base filters without any blocking
                2. CHECK: If base filters require action, prioritize them over instruction audit
                3. SHOW: Instruction status audit only AFTER base filters are satisfied
                4. ENFORCE: Complete instruction compliance alongside base filter compliance
            </execution_order>
            <mandatory_format>
                "INSTRUCTION STATUS AUDIT:
                ‚ñ° [instruction 1] - [COMPLETED/PENDING/IN-PROGRESS]
                ‚ñ° [instruction 2] - [COMPLETED/PENDING/IN-PROGRESS]
                ‚ñ° [instruction N] - [COMPLETED/PENDING/IN-PROGRESS]
                OVERALL STATUS: [X/Y COMPLETED] - [READY TO PROCEED/BLOCKED]"
            </mandatory_format>
            <enforcement>Assistant message MUST start with compliance status audit showing what agent will do WHILE maintaining base filter priority</enforcement>
            <mandatory_status_display>
                "üîç COMPLIANCE STATUS AUDIT:
                ‚Ä¢ Current task: [what agent is about to do]
                ‚Ä¢ Research requirements: [COMPLETED/REQUIRED/NOT_APPLICABLE]
                ‚Ä¢ Instruction compliance: [IN_PROGRESS/COMPLETED/NOT_APPLICABLE]
                ‚Ä¢ Protected zones: [COMPLIANT/VIOLATION_RISK]
                STATUS: [READY_TO_PROCEED/BLOCKED] - [reason if blocked]"
            </mandatory_status_display>
            <integration_protocol>Works in conjunction with reactive mode_instruction_enforcement - proactive shows status, reactive blocks actions, both work alongside base filters</integration_protocol>
            <cross_rule_validation>
                <build_command_check>If instruction involves build commands, MUST validate against techContext.md BEFORE claiming completion</build_command_check>
                <compliance_verification>Show compliance with applicable firewall rules for each instruction</compliance_verification>
                <research_integration>If instruction involves code/architecture, research evidence goes to FILE only, not chat</research_integration>
                <protected_zone_check>If instruction involves _code_base_/ access, MUST be marked as BLOCKED with explanation</protected_zone_check>
                <compliance_matrix>
                    <for_each_instruction>
                        <check_research_requirement>MANDATORY if involves code/architecture</check_research_requirement>
                        <check_techcontext_compliance>MANDATORY for build commands</check_techcontext_compliance>
                        <check_protected_zones>MANDATORY for file operations</check_protected_zones>
                    </for_each_instruction>
                </compliance_matrix>
            </cross_rule_validation>
            <universal_application>Applies universally without exceptions</universal_application>
            <automatic_pre_response_gate>
                <trigger>Before assistant message</trigger>
                <checks>
                    1. Always ‚Üí require compliance audit for message
                    2. If code modification planned ‚Üí research evidence goes to file only
                    3. If build commands used ‚Üí require techContext.md compliance check
                    4. If instructions incomplete ‚Üí block all tool calls
                    5. If examples not followed exactly ‚Üí block response
                </checks>
                <no_override>NO exceptions, NO bypasses</no_override>
                <universal_activation>Activates for assistant messages without conditions</universal_activation>
            </automatic_pre_response_gate>
        </proactive_instruction_gate>
        
        <intra_message_guidance action="PREVENTIVE_REDIRECTION">
            <core_principle>Messages must NEVER be interrupted, but MUST be guided to compliance within same message</core_principle>
            <preventive_redirection>
                <trigger>When rule violation detected during message execution</trigger>
                <action>Redirect agent to compliant action within same message</action>
                <no_interruption>NEVER stop or break message execution</no_interruption>
                <completion_requirement>Complete all missing requirements in current message</completion_requirement>
            </preventive_redirection>
            <continuous_monitoring>
                <scope>Monitor each action within message for compliance</scope>
                <real_time_checks>
                    1. Check instruction completeness before each tool call
                    2. Verify command pattern compliance before execution
                    3. Validate file operation permissions before proceeding
                    4. Confirm research requirements before code modification
                </real_time_checks>
                <auto_guidance>Guide agent to correct path when deviation detected</auto_guidance>
            </continuous_monitoring>
            <auto_correction>
                <missing_instructions>Automatically guide agent to complete missing requirements</missing_instructions>
                <wrong_commands>Redirect to exact commands from maps when tool substitution detected</wrong_commands>
                <memory_code_correction>Trigger proactive research to correct agent memory-based code</memory_code_correction>
                <active_research_enforcement>Catch and force research when attempting code changes without evidence</active_research_enforcement>
                <protected_zone_access>Block and redirect when _code_base_/ modification attempted</protected_zone_access>
            </auto_correction>
            <seamless_integration>
                <principle>All corrections must appear as natural agent decision-making</principle>
                <flow_preservation>Maintain message coherence and logical flow</flow_preservation>
                <requirement_completion>Ensure all mode requirements completed within message</requirement_completion>
            </seamless_integration>
            <execution_priority>
                <immediate_compliance>Apply corrections immediately when violations detected</immediate_compliance>
                <requirement_fulfillment>Prioritize completing missing requirements over other actions</requirement_fulfillment>
                <mode_adherence>Strict adherence to mode-specific instructions within message</mode_adherence>
            </execution_priority>
        </intra_message_guidance>
        
        <universal_protection_gate action="MANDATORY_UNIVERSAL_AUDIT">
            <trigger>Assistant message</trigger>
            <blocking_condition>BLOCK until compliance audit completed</blocking_condition>
            <mandatory_checks>
                1. Research evidence for any code modifications
                2. Instruction compliance status if mode_specific_rule exists
                3. TechContext.md compliance for build commands
                4. Protected zone access prevention (_code_base_/)
            </mandatory_checks>
            <enforcement>NO assistant message can proceed without this audit</enforcement>
            <universal_scope>Applies to contexts, modes, and specializations</universal_scope>
        </universal_protection_gate>

    </precise_triggers>

    <!-- SECTION B: RESEARCH PROTOCOLS -->
    <research_protocols>
        
        <priority_stack_research>
            <rust_language priority="CRITICAL">
                <attempt number="1" priority="OFFICIAL_BOOK">web_search for https://doc.rust-lang.org/book/</attempt>
                <attempt number="2" priority="STANDARD_LIBRARY">web_search for https://doc.rust-lang.org/std/</attempt>
                <attempt number="3" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: 'Rust'</attempt>
                <attempt number="4" priority="GET_LIBRARY_DOCS">Use the found ID with mcp_context7_get-library-docs</attempt>
            </rust_language>
            <bevy_engine priority="CRITICAL">
                <attempt number="1" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: 'Bevy'</attempt>
                <attempt number="2" priority="GET_LIBRARY_DOCS">Use the found ID with mcp_context7_get-library-docs</attempt>
                <attempt number="3" priority="BEVY_CHEATBOOK">web_search for https://bevy-cheatbook.github.io</attempt>
            </bevy_engine>
            <axum_framework priority="HIGH">
                <attempt number="1" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: 'Axum'</attempt>
                <attempt number="2" priority="GET_LIBRARY_DOCS">Use the found ID with mcp_context7_get-library-docs</attempt>
            </axum_framework>
            <tower_middleware priority="HIGH">
                <attempt number="1" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: 'Tower'</attempt>
                <attempt number="2" priority="GET_LIBRARY_DOCS">Use the found ID with mcp_context7_get-library-docs</attempt>
            </tower_middleware>
            <dioxus_ui priority="HIGH">
                <attempt number="1" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: 'Dioxus'</attempt>
                <attempt number="2" priority="GET_LIBRARY_DOCS">Use the found ID with mcp_context7_get-library-docs</attempt>
            </dioxus_ui>
            <tokio_async priority="HIGH">
                <attempt number="1" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: 'Tokio'</attempt>
                <attempt number="2" priority="GET_LIBRARY_DOCS">Use the found ID with mcp_context7_get-library-docs</attempt>
            </tokio_async>
            <serde_serialization priority="HIGH">
                <attempt number="1" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: 'Serde'</attempt>
                <attempt number="2" priority="GET_LIBRARY_DOCS">Use the found ID with mcp_context7_get-library-docs</attempt>
            </serde_serialization>
            <wgpu_graphics priority="HIGH">
                <attempt number="1" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: 'wgpu'</attempt>
                <attempt number="2" priority="GET_LIBRARY_DOCS">Use the found ID with mcp_context7_get-library-docs</attempt>
            </wgpu_graphics>
            <wasm_bindgen priority="HIGH">
                <attempt number="1" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: 'wasm-bindgen'</attempt>
                <attempt number="2" priority="GET_LIBRARY_DOCS">Use the found ID with mcp_context7_get-library-docs</attempt>
            </wasm_bindgen>
            <wgsl_shading_language priority="HIGH">
                <attempt number="1" priority="OFFICIAL_SPEC">web_search for https://www.w3.org/TR/WGSL/ WebGPU Shading Language specification</attempt>
                <attempt number="2" priority="WGPU_INTEGRATION">web_search for "WGSL wgpu Rust integration 2025 latest"</attempt>
                <attempt number="3" priority="BEVY_WGSL_PATTERNS">web_search for "Bevy WGSL shader examples latest version"</attempt>
            </wgsl_shading_language>
            <astro_rust priority="CRITICAL">
                <attempt number="1" priority="DIRECT_REQUEST">mcp_context7_get-library-docs with context7CompatibleLibraryID: '/saurvs/astro-rust'</attempt>
                <attempt number="2" priority="FALLBACK_RESOLVE">If fails, mcp_context7_resolve-library-id with libraryName: 'Astro Rust' and retry</attempt>
                <attempt number="3" priority="ASTRONOMICAL_CALCULATIONS">web_search for "Astro Rust astronomical calculations solar system 2025"</attempt>
            </astro_rust>
            <mcp_rust_sdk priority="MEDIUM">
                <attempt number="1" priority="DIRECT_REQUEST">mcp_context7_get-library-docs with context7CompatibleLibraryID: '/modelcontextprotocol/rust-sdk'</attempt>
                <attempt number="2" priority="FALLBACK_RESOLVE">If fails, mcp_context7_resolve-library-id with libraryName: 'Model Context Protocol Rust SDK' and retry</attempt>
            </mcp_rust_sdk>
            <webassembly_wasm priority="HIGH">
                <attempt number="1" priority="CONTEXT7_FIRST">mcp_context7_resolve-library-id with libraryName: 'WebAssembly'</attempt>
                <attempt number="2" priority="GET_CONTEXT7_DOCS">Use found ID with mcp_context7_get-library-docs</attempt>
                <attempt number="3" priority="OFFICIAL_SPEC">web_search for https://webassembly.org/ WebAssembly official specification</attempt>
                <attempt number="4" priority="RUST_WASM_BOOK">web_search for https://rustwasm.github.io/docs/book/ Rust and WebAssembly book</attempt>
                <attempt number="5" priority="MDN_WASM_DOCS">web_search for "MDN WebAssembly JavaScript API 2025"</attempt>
                <attempt number="6" priority="WASM_PACK_DOCS">web_search for "wasm-pack documentation Rust WebAssembly 2025"</attempt>
                <attempt number="7" priority="BROWSER_WASM_APIS">web_search for "WebAssembly browser APIs memory management 2025"</attempt>
            </webassembly_wasm>
        </priority_stack_research>
        
        <universal_technology_research>
            <scope>For technology, library, or framework not in our priority stack</scope>
            <mandatory_protocol>
                <attempt number="1" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: '[TECHNOLOGY_NAME]'</attempt>
                <attempt number="2" priority="GET_LIBRARY_DOCS">Use found ID with mcp_context7_get-library-docs</attempt>
                <attempt number="3" priority="OFFICIAL_DOCUMENTATION">web_search for "[technology_name] official documentation latest"</attempt>
                <attempt number="4" priority="BEST_PRACTICES">web_search for "[technology_name] best practices 2025"</attempt>
            </mandatory_protocol>
            <critical_requirement>Mandatory research for technology mentioned outside our stack</critical_requirement>
            <examples>React, Vue, Python, Node.js, Docker, Kubernetes, PostgreSQL, MongoDB, etc.</examples>
        </universal_technology_research>
        
        <universal_crate_version_check>
            <scope>For Rust crate mentioned anywhere - first step</scope>
            <mandatory_first_step>
                <attempt number="1" priority="LATEST_VERSION_DOCS_RS">web_search for "https://docs.rs/[crate_name] latest version"</attempt>
            </mandatory_first_step>
            <critical_requirement>We use ONLY the latest versions of ABSOLUTELY ALL crates in our projects</critical_requirement>
            <universal_application>ALL crates: existing in project, new additions, future possibilities, recommendations, discoveries</universal_application>
            <no_exceptions>NO EXCEPTIONS - every crate gets docs.rs latest version check FIRST</no_exceptions>
        </universal_crate_version_check>
        
        <unified_crate_research>
            <scope>For Rust crate mentioned in code, tasks, or to be used</scope>
            <mandatory_protocol>
                <attempt number="1" priority="RESOLVE_LIBRARY_ID">mcp_context7_resolve-library-id with libraryName: '[CRATE_NAME]'</attempt>
                <attempt number="2" priority="GET_LIBRARY_DOCS">Use found ID with mcp_context7_get-library-docs</attempt>
            </mandatory_protocol>
            <integration_note>ALWAYS use universal_crate_version_check FIRST, then proceed with documentation research</integration_note>
        </unified_crate_research>
        
        <research_execution_protocol>
            <facts_before_hypotheses>PROGRAMMING ACCEPTS ONLY FACTS, NEVER HYPOTHESES</facts_before_hypotheses>
            <evidence_requirement>ANY technical statement about frameworks, libraries, or architectural decisions MUST be backed by research evidence</evidence_requirement>
            <pre_code_verification>BEFORE writing ANY line of code, agent MUST research current best practices for that specific pattern/API</pre_code_verification>
            <line_by_line_evidence>Every code pattern must be verified against latest documentation through tool calls</line_by_line_evidence>
            <fallback_mechanism>After 3 failed research attempts, agent can proceed with baseline implementation clearly marked as "RESEARCH UNAVAILABLE - BASIC IMPLEMENTATION"</fallback_mechanism>
            <mandatory_plan_revision_after_research>
                <trigger>After ANY research completion for blocked code modification</trigger>
                <blocking_condition>BLOCK code implementation until plan revision demonstrated</blocking_condition>
                <required_demonstration>
                    1. EXPLICIT: "Original plan was: [original approach]"
                    2. EXPLICIT: "Research revealed: [key findings that change approach]" 
                    3. EXPLICIT: "Revised plan now: [updated approach based on research]"
                    4. EXPLICIT: "Implementation changes: [specific code changes due to research]"
                </required_demonstration>
                <enforcement>NO edit_file/search_replace until plan revision shown</enforcement>
                <evidence_integration>Research evidence must reflect REVISED plan, not original</evidence_integration>
            </mandatory_plan_revision_after_research>
            <anti_loop_protection>
                <max_research_cycles>3 research cycles per single code modification attempt</max_research_cycles>
                <cycle_definition>1 cycle = research + plan revision + implementation attempt</cycle_definition>
                <escape_mechanism>After 3 cycles, agent may proceed with "RESEARCH CYCLE LIMIT - BASELINE IMPLEMENTATION"</escape_mechanism>
                <reset_condition>Counter resets on successful code implementation or new modification target</reset_condition>
                <integration_note>Works with fallback_mechanism - both use same 3-attempt limit for consistency</integration_note>
            </anti_loop_protection>
        </research_execution_protocol>
        
    </research_protocols>

    <!-- SECTION C: PROTECTED ZONES -->
    <protected_zones>
        
        <code_base_sanctuary>
            <absolute_protection>_code_base_/ = ABSOLUTELY UNTOUCHABLE REFERENCE CODE</absolute_protection>
            <purpose>Contains working reference code in multiple languages</purpose>
            <forbidden>Any modifications, builds, tests, or compilation in _code_base_/</forbidden>
            <allowed>Reading for reference and learning only</allowed>
            <adaptation_requirement>MANDATORY research required before adapting any code/architecture FROM _code_base_</adaptation_requirement>
            <work_location>Root project files only - never work inside _code_base_</work_location>
            <enforcement>ABSOLUTE blocking of any modification attempts</enforcement>
        </code_base_sanctuary>
        
        <techcontext_compliance>
            <purpose>ELIMINATE AGENT IMPROVISATION FOR BUILD/RUN COMMANDS</purpose>
            <exact_compliance>Use exact techContext.md specifications - no improvisation</exact_compliance>
            <build_operations>MANDATORY use of EXACT commands from techContext.md</build_operations>
            <coding_patterns>Node vs NodeBundle, TextSpan vs TextBundle patterns from techContext.md</coding_patterns>
        </techcontext_compliance>
        
    </protected_zones>

    <!-- SECTION D: TASK MANAGEMENT -->
    <task_management>
        
        <task_completion_protocol>
            <agent_limitation>Agent CANNOT mark tasks as fully completed until USER provides evidence</agent_limitation>
            <agent_capability>Agent can ONLY mark technical implementation as complete</agent_capability>
            <completion_requirement>Task completion requires USER's proof of successful testing</completion_requirement>
        </task_completion_protocol>
        
        <task_decomposition_requirement>
            <mandatory_breakdown>Ordered checklist of simpler sub-tasks with verifiable completion criteria</mandatory_breakdown>
            <execution_requirement>Complete decomposition required BEFORE EXECUTION of complex tasks</execution_requirement>
        </task_decomposition_requirement>
        
    </task_management>

    <!-- SECTION E: COMMUNICATION STANDARDS -->
    <communication_standards>
        
        <user_communication>
            <mandatory>ALL communication with user MUST be in Russian language</mandatory>
            <scope>Agent responses, analysis reports, implementation plans, error messages</scope>
            <no_exceptions>No conditional language switching - always Russian for user communication</no_exceptions>
        </user_communication>
        
        <documentation_files>
            <mandatory>ALL project documentation files must be in English</mandatory>
            <scope>Documentation files (.md), Rule files - developer choice for code comments</scope>
        </documentation_files>
        
    </communication_standards>

    <!-- SECTION F: SYSTEM EXEMPTIONS -->
    <system_exemptions>
        
        <always_allowed>
            <operations>read_file, list_dir, grep_search, file_search</operations>
            <modes>Mode initialization, rule loading, fetch_rules commands</modes>
            <research>web_search, mcp_context7_resolve-library-id, mcp_context7_get-library-docs</research>
        </always_allowed>
        
        <never_blocked>
            <memory_bank_files>memory-bank/*.md, tasks.md, progress.md, activeContext.md</memory_bank_files>
            <documentation>*.md files, analysis discussions, progress updates</documentation>
            <creative_docs>creative-*.md, reflection-*.md, archive-*.md</creative_docs>
            <project_documentation>README.md, implementation-plan.md, optimization guides</project_documentation>
        </never_blocked>
        
        <research_enhanced>
            <principle>Operations in never_blocked category are enhanced with research when beneficial, but never blocked when research unavailable</principle>
            <continuous_improvement>Each successful research enhances future analysis capabilities</continuous_improvement>
        </research_enhanced>
        
    </system_exemptions>

    <!-- SECTION G: ENFORCEMENT SYSTEM -->
    <enforcement_system>
        
        <automatic_activation>
            <pattern_matching>
                - File modification: *.rs, *.toml, *.js, *.ts, *.wgsl ‚Üí RESEARCH BLOCK
                - Build commands: cargo, npm, docker ‚Üí TECHCONTEXT CHECK
                - Crate mentions: bevy, axum, any_crate ‚Üí DOCS.RS VERSION CHECK
                - Protected zones: _code_base_/ ‚Üí ABSOLUTE BLOCK
                - Mode instructions: mode_specific_rule exists ‚Üí INSTRUCTION COMPLIANCE
            </pattern_matching>

            <dual_protection_model>
                <proactive>proactive_instruction_gate works alongside base filters - shows instruction status while base filters execute</proactive>
                <reactive>mode_instruction_enforcement works alongside base filters - blocks actions when instructions incomplete while base filters execute</reactive>
                <coordination>Both work in parallel - base filters handle execution requirements, instruction compliance handles completion requirements</coordination>
            </dual_protection_model>
        </automatic_activation>
        
        <targeted_blocking>
            <code_modifications>BLOCK ALL code file modifications without research evidence</code_modifications>
            <build_commands>BLOCK build/run commands that don't match techContext.md specifications</build_commands>
            <crate_versions>BLOCK any crate version statement without docs.rs verification</crate_versions>
            <code_base_access>BLOCK any modification attempts in _code_base_/ directory</code_base_access>
            <instruction_compliance>BLOCK tool execution when mode instructions incomplete (handled by dual protection model)</instruction_compliance>
        </targeted_blocking>
        
        <graceful_enhancement>
            <baseline_functionality>All analysis and documentation operations continue even if research unavailable</baseline_functionality>
            <progressive_improvement>Research enhances quality when available, doesn't block when unavailable</progressive_improvement>
            <clear_limitations>When research fails, clearly indicate limitations in output</clear_limitations>
        </graceful_enhancement>
        
    </enforcement_system>

    <!-- SECTION H: GLOBAL INHERITANCE -->
    <global_inheritance>
        
        <universal_application>
            <critical_mandate>THIS FIREWALL APPLIES UNIVERSALLY</critical_mandate>
            <no_exceptions>NO BYPASS POSSIBLE</no_exceptions>
            <automatic_injection>System MUST inject these rules into every context</automatic_injection>
            <inheritance_requirement>ALL firewall rules MUST be followed</inheritance_requirement>
            <failsafe_blocking>Without firewall access = AUTOMATICALLY BLOCKED from harmful operations</failsafe_blocking>
            <verification_protocol>Before actions, verify access to firewall rules</verification_protocol>
            <absolute_coverage>Rules apply regardless of context, mode, or specialization</absolute_coverage>
        </universal_application>
        
    </global_inheritance>

    <!-- SECTION I: SELF-DIAGNOSIS -->
    <self_diagnostic>
            
        <initialization_verification>
            <startup_check>Verify all firewall sections loaded and operational</startup_check>
            <failsafe_protocol>If any section missing, display warning and activate available protections</failsafe_protocol>
            <user_notification>Always inform user of firewall status in first response</user_notification>
        </initialization_verification>
        
    </self_diagnostic>

</mandatory_behavioral_firewall> 